var fs = require('fs');
/*
 Variables globales modélisant les paramètres de l'algo
 */
var n_lines = 10;
var n_columns = 10;
var n_classes = 5;
var base_learning_size = 3/4;
var near = 5;

/* Définition de la fonction principale de l'algo */
var main = function(){
    /* Variables */
    var tab_x = [];
    var tab_classes = [];

    /* Lecture du jeu de données */
    readData(tab_x, tab_classes);

    tab_x = [];
    tab_classes = [];
    createRandomData(tab_x, tab_classes);
    console.log("tab_x : ");
    console.log(tab_x)
    console.log("tab_classes : ");
    console.log(tab_classes);

    /*  */
}

exports.main = main;

/**
 * Procédure de lecture du fichier data.txt
 * @param tab_x Doit être initialisé à vide. Est rempli des valeurs de data.txt
 * @param tab_classes Doit être initialisé à vide. Est rempli des classes de data.txt
 */
function readData(tab_x, tab_classes) {
    var data = fs.readFileSync('data.txt', 'utf8');
    var lines = [];
    lines = data.split("\n");
    lines = lines.map(function(element){
        element = element.split(",");
        element = element.map(function(element_inside){
            element_inside = parseFloat(element_inside);
            return element_inside;
        });
        return element;
    });

    shuffle(lines);

    lines.forEach(function (element) {
        var tab_tmp = [];
        element.forEach(function (element_inside, index) {
            if (index != element.length - 1) {
                tab_tmp.push(element_inside);
            } else {
                tab_classes.push(element_inside);
            }
        });
        tab_x.push(tab_tmp);
    });
}

/**
 *
 * @param tab_x
 * @param tab_classes
 */
function createRandomData(tab_x, tab_classes) {
    var mu = Math.random() * 8;
    var sigma = Math.abs(mu / 10) + Math.random() * 10;
    for (var i = 0; i < n_lines; i++) {
        var tab_tmp = [];
        for (var j = 0; j < n_columns; j++) {
            tab_tmp.push(parseFloat(Math.abs(sigma * generateZ() + mu).toFixed(1)));
        }
        tab_x.push(tab_tmp);
        tab_classes.push(Math.floor(Math.random()*n_classes + 1));
    }
}

shuffle = function(o){
    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};

/**
 * Fonction permettant une variable aléatoire avec une distribution normale standard
 * @returns {number} nombre aléatoire
 */
function generateZ(){
    return Math.sqrt(-2*Math.log(Math.random())) * Math.cos(2*Math.PI*Math.random());
}

/**
 * Fonction permettant de déterminer la distance euclidienne entre 2 vecteurs
 * @param v1 vecteur n°1 de taille n
 * @param v2 vecteur n°2 de taille n
 * @returns {number} le distance euclidienne entre ces deux vecteurs
 */
function getDistance(v1, v2){
    var distance = 0;
    v1.forEach(function(element, index){
        distance += Math.pow((element - v2[index]), 2);
    });
    return Math.sqrt(distance);
}

/**
 * Fonction permettant de déterminer la distance de Manhanttan entre 2 vecteurs
 * @param v1 vecteur n°1 de taille n
 * @param v2 vecteur n°2 de taille n
 * @returns {number} le distance de Manhanttan entre ces deux vecteurs
 */
function getDistanceManhattan(v1, v2){
    var distance = 0;
    v1.forEach(function(element, index){
        distance += Math.abs(element - v2[index]);
    });
    return distance;
}

/**
 * Fonction permettant d'initialiser simplement un tableau avec des zeros
 * @param n nombre de 0 à insérer dans le tableau
 * @returns {Array} le tableau initialisé avec n zeros
 */
function initTab(n){
    var tab = [];
    for(var i = 0; i < n; i++){
        tab[i] = 0;
    }
    return tab;
}

/**
 * Fonction permettant de calculer et d'afficher le ratio d'erreur dans la détermination des classes
 * @param classes_defined les classes attendues
 * @param classes_found les classes trouvées
 */
function displayErrorRatio(classes_defined, classes_found){
    var total = 0;
    classes_defined.forEach(function(element, index){
        if (element != classes_found[index]) {
            total += 1;
        }
    });
    console.log("Pourcentage d'erreur : " + (total/classes_defined.length)*100+"%");
}